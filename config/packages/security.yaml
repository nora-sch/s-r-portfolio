security:
    # https://symfony.com/doc/current/security/experimental_authenticators.html
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#c-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: 'bcrypt'
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # users_in_memory: { memory: null }
        database:
            entity:
                class: App\Entity\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        # main:
        #     lazy: true
        #     provider: users_in_memory
        api:
            pattern: ^/api
            stateless: true
            # anonymous: true
            json_login:
                # Here authentication will happen (token generation)
                check_path: /api/login-check
                # Handle successfull authentication
                success_handler: lexik_jwt_authentication.handler.authentication_success
                # Handle authentification failures (invalid credentials, no credentials etc.)
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            guard:
                authenticators:
                    # - lexik_jwt_authentication.jwt_token_authenticator
                    - App\Security\TokenAuthenticator

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        # - { path: ^/api/login,  roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # - { path: ^/api,        roles: IS_AUTHENTICATED_FULLY }

         - { path: ^/api,        roles: IS_AUTHENTICATED_ANONYMOUSLY }
    role_hierarchy:
        ROLE_WRITER: ROLE_COMMENTATOR
        ROLE_ADMIN: [ROLE_WRITER, ROLE_EDITOR]
        ROLE_SUPERADMIN: ROLE_ADMIN